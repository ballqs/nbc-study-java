오류(Error)
  코드의 문제로 발생하는 경우도 있지만, 일단 발생하는 경우 회복이 불가능한 문제
  주로 환경적인 이유로 발생

예외(Exception)
  일반적으로 회복이 가능한 문제

컴파일 에러(예외)
  .java 파일을 .class 파일로 컴파일할때 발생한느 에러
  있지 않은 클래스를 호출하거나 접근이 불가능한 프로퍼티나 메소드에 접근하는 경우
  해결 방법은 문법에 맞게 다시 작성하는 것

런타임 에러(예외)
  컴파일은 잘 되었지만 프로그램 실행도중 맞닥뜨리게 되는 예외

확인된 에러(Checked Exception)
  컴파일 시점 확인 가능한 에러
  예외 처리가 반드시 필요함
  예외는 다른 예외를 유발할 수 있다
  예외 A가 예외 B를 발생시켰다면, 예외 A는 B의 원인 예외 (체인 형태)
  initCause()
    지정한 예외를 원인 예외로 등록하는 메소드
  getCause()
    원인 예외를 반환하는 메소드

미확인된 에러(UnChecked Exception)
  런타임 시점에 확인되는 에러
  예외 처리가 반드시 필요하지 않은 예외


ArrayIndexOutOfBoundException
(배열의 크기를 벗어난 조회 예외)
NullPointException
(존재 하지 않는 값 예외)
NumberFormatException
(숫자로 바꿀수 없는 변수 예외)
