프로세스
  운영체제로부터 자원을 할당받은 작업의 단위(실행 중인 프로그램을 의미)
  OS가 프로그램 실행을 위한 프로세스를 할당해 줄 때 프로세스 안에 프로그램 Code와 Data 그리고 메모리 영역(Stack, Heap)을 함께 할당해줌
    Code는 java main 메소드와 같은 코드
    Data는 프로그램 실행 중 저장할 수 있는 저장 공간
    Memory(메모리 영역)
      Stack : 지역변수,매개변수 리턴 변수를 저장하는 공간
      Heap : 프로그램이 동적으로 필요한 변수를 저장하는 공간

쓰레드
  프로세스가 할당받은 자원을 이용하는 실행의 단위
  프로세스가 작업중인 프로그램에서 실행요청이 들어오면 쓰레드를 만들어 명령 처리
  모든 쓰레드는 하나의 그룹에는 무조건 포함되어 있어야 한다.

멀티 쓰레드
  장점
    여러개의 쓰레드를 통해 여러개의 작업을 동시에 할 수 있어서 성능이 좋아짐
    스택을 제외한 모든 영역에서 메모리를 공유하기 때문에 자원을 보자 효율적으로 사용
    응답 쓰레드와 작업 쓰레드를 분리하여 빠르게 응답(비동기)
  단점
    동기화 문제가 발생
    교착 상태 발생

쓰레드의 상태
  NEW               : 쓰레드 객체 생성, 아직 start() 메서드 호출 전 상태
  RUNNABLE          : 실행 상태로 언제든지 갈수 있는 상태
  WAITING           : 다른 쓰레드가 통지 할 때까지 기다리는 상태
  TIMED_WAITING     : 주어진 시간 동안 기다리는 상태
  BLOCKED           : 사용하고자 하는 객체의 Lock이 풀릴 때까지 기다리는 상태
  TERMINATED        : 쓰레드의 작업이 종료된 상태

  sleep()       : 현재 쓰레드를 지정된 시간동안 멈추게 함
  interrupt()   : 일시정지 상태인 쓰레드를 실행대기 상태로 만듬
  join()        : 정해진 시간 동안 지정한 쓰레드가 작업하는 것을 기다림
  yield()       : 지정한 쓰레드는 실행 대기 상태가 되며 다른 쓰레드에게 자원을 양보함
  synchronized(): 멀티 쓰레드의 경우 여러 쓰레드가 한 프로세스의 자원을 공유해서 작업하기 때문에 동기화가 안되는 문제가 발생
                  동기화를 위해 다른 쓰레드의 침범을 막아야 하고 이를 임계 영역이라 함(임계 영역은 한번에 한 쓰레드만 사용 가능)
